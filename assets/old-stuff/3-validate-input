#!/usr/bin/env python3


import numpy as np
import torch
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import cv2
import os
import json
import math


def show_mask(mask, ax, random_color=False):
    if random_color:
        color = np.concatenate([np.random.random(3), np.array([0.6])], axis=0)
    else:
        color = np.array([30/255, 144/255, 255/255, 0.6])
    h, w = mask.shape[-2:]
    mask_image = mask.reshape(h, w, 1) * color.reshape(1, 1, -1)
    ax.imshow(mask_image)
    
def show_points(coords, labels, ax, marker_size=375):
    pos_points = coords[labels==1]
    neg_points = coords[labels==0]
    ax.scatter(pos_points[:, 0], pos_points[:, 1], color='green', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)
    ax.scatter(neg_points[:, 0], neg_points[:, 1], color='red', marker='*', s=marker_size, edgecolor='white', linewidth=1.25)   
    
def show_box(box, ax):
    x0, y0 = box[0], box[1]
    w, h = box[2] - box[0], box[3] - box[1]
    ax.add_patch(plt.Rectangle((x0, y0), w, h, edgecolor='green', facecolor=(0,0,0,0), lw=2))    



class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        try:
            self.impl = _GetchWindows()
        except ImportError:
            self.impl = _GetchUnix()

    def __call__(self): return self.impl()


class _GetchUnix:
    def __init__(self):
        import tty, sys

    def __call__(self):
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


class _GetchWindows:
    def __init__(self):
        import msvcrt

    def __call__(self):
        import msvcrt
        return msvcrt.getch()


getch = _Getch()




# SAM
from segment_anything import sam_model_registry, SamPredictor

sam_checkpoint = "sam_vit_b_01ec64.pth"
model_type = "vit_b"

device = "cuda"

sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)
sam.to(device=device)

predictor = SamPredictor(sam)

input_dir = "data/input"
image_dir = "data/image-seq"
output_dir = "data/sam-mask-input"
cache_dir = "data/segment-cache"

for filename in os.listdir(input_dir):
    if filename.endswith(".mp4"):
        name = os.path.splitext(filename)[0]
        image_subdir = os.path.join(image_dir, name)
        output = os.path.join(output_dir, f'{name}.json')

        if not os.path.exists(image_subdir) or not os.path.exists(output):
            print(name, 'skipped as not generated yet!')
            continue

        print('Generating', name)

        with open(output, 'r') as f:
            bb = json.loads(f.read())
    
        img = os.listdir(image_subdir)[0]

        image = cv2.imread(os.path.join(image_subdir, img))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        predictor.set_image(image)

        input_box = np.array([bb['x0'], bb['y0'], bb['x1'], bb['y1']])

        masks, _, _ = predictor.predict(
            point_coords=None,
            point_labels=None,
            box=input_box[None, :],
            multimask_output=True,
        )

        size = math.ceil(math.sqrt(len(masks)))
        fig, axs = plt.subplots(size, size, figsize=(10, 10))
        for i, ax in enumerate(axs.flat):
            ax.axis('off')

            if i >= len(masks):
                continue

            ax.imshow(image)
            show_mask(masks[i], ax)
            show_box(input_box, ax)
        
        plt.show()

        print('Accept [1 = delete, q = continue]?')
        result = getch()

        if result == '1':
            os.remove(output)



