#!/usr/bin/env python3

import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import cv2

import os
import json
import subprocess

input_dir = "data/input"
image_dir = "data/image-seq"
output_dir = "data/sam-mask-input"

class Annotate(object):
    def __init__(self):
        self.ax = plt.gca()
        self.rect = Rectangle((0,0), 1, 1, facecolor='red', alpha=0.5)
        self.x0 = None
        self.y0 = None
        self.x1 = None
        self.y1 = None
        self.ax.add_patch(self.rect)
        self.ax.figure.canvas.mpl_connect('button_press_event', self.on_press)
        self.ax.figure.canvas.mpl_connect('button_release_event', self.on_release)

    def on_press(self, event):
        self.x0 = event.xdata
        self.y0 = event.ydata

    def on_release(self, event):
        self.x1 = event.xdata
        self.y1 = event.ydata
        self.rect.set_width(self.x1 - self.x0)
        self.rect.set_height(self.y1 - self.y0)
        self.rect.set_xy((self.x0, self.y0))
        self.ax.figure.canvas.draw()

for filename in os.listdir(input_dir):
    if filename.endswith(".mp4"):
        name = os.path.splitext(filename)[0]
        image_subdir = os.path.join(image_dir, name)

        if not os.path.exists(image_subdir):
            print(name, 'has not been generated yet or is missing frames!')
            continue

        output = os.path.join(output_dir, f'{name}.json')

        if os.path.exists(output):
            print(name, 'skipped as bounding box input already exists!')
            continue

        image = cv2.imread(os.path.join(image_subdir, os.listdir(image_subdir)[0]))
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

        plt.imshow(image)
        a = Annotate()
        plt.show()

        

        if a.x0 is not None:
            with open(output, 'w') as f:
                f.write(json.dumps({
                    "x0": a.x0,
                    "x1": a.x1,
                    "y0": a.y0,
                    "y1": a.y1
                }))
